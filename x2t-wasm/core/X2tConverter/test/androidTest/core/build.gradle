apply plugin: 'com.android.library'
apply plugin: 'de.undercouch.download'
apply from: "$rootProject.projectDir/extra-builds/gradle/common.gradle"

/*
* Help:
*   https://developer.android.com/ndk/guides/cmake
*   https://developer.android.com/ndk/guides/standalone_toolchain
* */

// Common native libs path
def TOOLCHAIN_VERSION = 4.9
def NDK_VERSION = "android-ndk-r17c"
def HOST_PLATFORM = getHostNameFull()
def PATH_NDK = "${project.rootDir.path}/${NDK_VERSION}"
def PATH_TOOLCHAIN = "$PATH_NDK/toolchains/\$1/prebuilt/$HOST_PLATFORM/bin"
def PATH_STANDALONE_SCRIPT = "$PATH_NDK/build/tools"
def PATH_3PARTY = "$project.ext.SRC_CORE/Common/3dParty"
def NDK_URL = "https://dl.google.com/android/repository/${NDK_VERSION}-${HOST_PLATFORM}.zip"
def NDK_DOWNLOAD = "${PATH_NDK}.zip"

// Keys for constant
def MASK_LIB = 'lib*.*'

// OpenSsl
def OPENSSL_SRC = "$PATH_3PARTY/openssl/openssl"
def OPENSSL_LIBS_PATH = "$project.ext.PATH_TO_NATIVE_LIBS/openssl"
def OPENSSL_LIBS_INSTALL = "$OPENSSL_LIBS_PATH/install"

// Curl
def CURL_SRC = "$PATH_3PARTY/curl/curl"
def CURL_LIBS_PATH = "$project.ext.PATH_TO_NATIVE_LIBS/curl"
def CURL_LIBS_INSTALL = "$CURL_LIBS_PATH/install"

// Iconv
def ICONV_NAME = "libiconv-1.15"
def ICONV_NAME_GZ = ICONV_NAME + ".tar.gz"
def ICONV_URL = "https://ftp.gnu.org/pub/gnu/libiconv/$ICONV_NAME_GZ"
def ICONV_SRC = "$project.ext.PATH_TO_NATIVE_SRC/iconv"
def ICONV_SRC_UNPACK = "$ICONV_SRC/$ICONV_NAME"
def ICONV_SRC_GZ = "$ICONV_SRC/$ICONV_NAME_GZ"
def ICONV_LIBS_PATH = "$project.ext.PATH_TO_NATIVE_LIBS/iconv"
def ICONV_LIBS_INSTALL = "$ICONV_LIBS_PATH/install"

// Icu
def ICU_SRC = "$PATH_3PARTY/icu/" + findDirName("$PATH_3PARTY/icu", getHostName())
def ICU_BUILD = "$ICU_SRC/build"
def ICU_SRC_ROOT = "$ICU_SRC/icu/source"
def ICU_LIBS_PATH = "$project.ext.PATH_TO_NATIVE_LIBS/icu"
def ICU_LIBS_INSTALL = "$ICU_LIBS_PATH/install"

// Boost
def BOOST_VERSION = "1.58.0"
def BOOST_CONFIG = "$project.ext.PATH_TO_NATIVE_SRC/boost/configs"
def BOOST_SRC = "$PATH_3PARTY/boost/boost_" + BOOST_VERSION.replace(".", "_")
def BOOST_LIBS_PATH = "$project.ext.PATH_TO_NATIVE_LIBS/boost"
def BOOST_LIBS_INSTALL = "$BOOST_LIBS_PATH/install"


android {

    buildToolsVersion '28.0.3'
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion project.ext.SDK_MIN
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        // Constants for java
        buildConfigField "String", "LIB_CORE", "\"$project.ext.LIB_CORE\""

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang',
                          '-DANDROID_STL=c++_static',
                          '-DANDROID_ARM_NEON=TRUE',
                          // Custom arguments for cmake
                          '-DARG_SRC_CORE=' + project.ext.SRC_CORE,
                          '-DARG_LIB_CORE=' + project.ext.LIB_CORE,
                          '-DARG_LIBS=' + project.ext.PATH_TO_NATIVE_LIBS

                cppFlags '-std=c++14',
                         '-fexceptions',
                         '-frtti'
            }
        }

        ndk {
            abiFilters project.ext.ABI_ARM, project.ext.ABI_x86
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            jniDebuggable true
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$project.ext.SUPPORT"
}

/*
* Common NDK values
* */
def getValues() {
    return [
            'armeabi-v7a' : [
                    'ABI' : 'armeabi-v7a',
                    'TCN' : 'arm',
                    'TCP' : 'arm-linux-androideabi-',
                    'ARCH' : 'arm-linux-androideabi',
                    'WAPATH' : 'armv7-a/'
            ]
            ,
            'x86' : [
                    'ABI' : 'x86',
                    'TCN' : 'x86',
                    'TCP' : 'x86-',
                    'ARCH' : 'i686-linux-android',
                    'WAPATH' : ''
            ]
//            ,
//            'arm64-v8a' : [
//                    'ABI' : 'arm64-v8a',
//                    'TCN' : 'arm64',
//                    'TCP' : 'aarch64-linux-android-',
//                    'ARCH' : 'aarch64-linux-android'
//            ]
//            ,
//            'x86_64' : [
//                    'ABI' : 'x86_64',
//                    'TCN' : 'x86_64',
//                    'TCP' : 'x86_64-',
//                    'ARCH' : 'x86_64-linux-android'
//            ]
    ]
}


/*
* Get from: <NDK_PATH>/build/core/toolchains/<ARCHs>
* */
def getFlagsForArch(String abi, boolean isDebug) {

    // Common flags
    def FLAGS_ARM_DEBUG = isDebug? "-O0 -UNDEBUG" : "-O2 -DNDEBUG"
    def FLAGS_INCLUDE_BASE = "$FLAGS_ARM_DEBUG -g -Os -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes"
    def FLAGS_LINK_BASE = "-no-canonical-prefixes"

    // Specific flags
    def FLAGS = null
    switch (abi) {
        case 'armeabi-v7a':
            def CFLAGS = "$FLAGS_INCLUDE_BASE -marm -fpic -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -Wl,--fix-cortex-a8"
            FLAGS = [
                    INCLUDE_CFLAGS : "$CFLAGS",
                    INCLUDE_CPPFLAGS : "$CFLAGS -fexceptions -frtti",
                    LINK : "$FLAGS_LINK_BASE -Wl,--fix-cortex-a8"
            ]
            break;
        case 'x86':
            def CFLAGS = "$FLAGS_INCLUDE_BASE -mtune=intel -mssse3 -mfpmath=sse"
            FLAGS = [
                    INCLUDE_CFLAGS : "$CFLAGS",
                    INCLUDE_CPPFLAGS : "$CFLAGS -fexceptions -frtti",
                    LINK : "$FLAGS_LINK_BASE"
            ]
            break;
        default:
            throw new GradleScriptException('Unknown abi for flags...')
    }

    println "\nFlags for $abi:"
    println "       $FLAGS.INCLUDE_CFLAGS"
    println "       $FLAGS.INCLUDE_CPPFLAGS"
    println "       $FLAGS.LINK\n"

    return FLAGS
}

/*
* Create standalone build path with set enviroment
* */
def createStandalone(String standaloneDir, String standaloneDest, String sdkMin, String abi, boolean isClang, boolean isDebug) {

    def values = getValues()

    println "\nStandalone dir script path: $standaloneDir"
    println "Standalone dir destination path: $standaloneDest"
    println "Sdk min version: $sdkMin"
    println "Abi: $abi"
    println "Arch: ${values[abi].ARCH}"
    println "Is debug: $isDebug\n"

    def resultCode = exec {
        println "\nCreate standalone script..."
        workingDir standaloneDir
        commandLine "./make-standalone-toolchain.sh", \
                    "--install-dir=$standaloneDest", \
                    "--arch=${values[abi].TCN}", \
                    "--platform=android-$sdkMin", \
                    "--stl=libc++", \
                    "--force"
    }

    println "Standalone script result code: $resultCode"

    def PATH = null
    if (resultCode.exitValue == 0) {
        def FLAGS = getFlagsForArch(abi, isDebug)
        def BIN = "$standaloneDest/bin"
        def SYSROOT = "$standaloneDest/sysroot"
        def CC = isClang? 'clang' : 'gcc'
        def CXX = isClang? 'clang++' : 'g++'
        def AS = isClang? 'clang' : 'as'

        def CFLAGS = "--sysroot=$SYSROOT" +
                     " -D__ANDROID_API__=$sdkMin" +
                     " -I$SYSROOT/usr/include" +
                     " -I$SYSROOT/usr/include/${values[abi].ARCH}" +
                     " -I$standaloneDest/include/python2.7"

        def LDFLAGS = "--sysroot=$SYSROOT" +
                      " $FLAGS.LINK" +
                      " -L$SYSROOT/usr/lib" +
                      " -L$standaloneDest/lib" +
                      " -L$standaloneDest/lib64"

        def LDLIBS = "$standaloneDest/${values[abi].ARCH}/lib/${values[abi].WAPATH}libstdc++.a"

        PATH = [
                    PATH : getPathEnv(BIN),
                    ROOT : standaloneDest,
                    BIN : BIN,
                    CC : "${values[abi].ARCH}-$CC",
                    CXX : "${values[abi].ARCH}-$CXX",
                    CPP : "${values[abi].ARCH}-cpp",
                    LD : "${values[abi].ARCH}-ld",
                    AS : "${values[abi].ARCH}-$AS",
                    AR : "${values[abi].ARCH}-ar",
                    RANLIB : "${values[abi].ARCH}-ranlib",
                    STRIP : "${values[abi].ARCH}-strip",
                    SYSROOT : SYSROOT,
                    CPPFLAGS : "$CFLAGS $FLAGS.INCLUDE_CPPFLAGS",
                    LDFLAGS : "$LDFLAGS",
                    LDLIBS : "$LDLIBS"
        ]

        println "\nStandalone created SUCCESS!"
        PATH.each { key, value ->
            println "       $key: $value"
        }
    }

    return PATH
}


/*
* Packing all compiled includes/libraries
* */
task packingLibs(type: Tar) {
    doFirst { println "\nPacking libraries..." }
    eachFile { println it.file }
    archiveName project.ext.LIBS_PACK_NAME
    compression Compression.GZIP
    destinationDir file(project.ext.PATH_TO_NATIVE_BUILDS)
    from (files(project.ext.PATH_TO_NATIVE_BUILDS))
    include "libs/**"
}

/*
* Unpacking all compiled includes/libraries
* */
task unpackingLibs(type: Copy) {
    if (!isFolderNotEmpty(project.ext.PATH_TO_NATIVE_LIBS)) {
        doFirst { println "\nUnpacking libraries..." }
        eachFile { println it.file }
        from tarTree(resources.gzip("$project.ext.PATH_TO_NATIVE_ARCHS"))
        into project.ext.PATH_TO_NATIVE_BUILDS
    } else {
        println "Folder already exist: $project.ext.PATH_TO_NATIVE_LIBS"
    }
}

/*
* Download NDK ver.17c with deprecated support of GCC
* */
task downloadNdk() {
    doLast {
        if (!file(PATH_NDK).exists()) {
            if (!file(NDK_DOWNLOAD).exists()) {
                download {
                    println "\nDownload NDK..."
                    src NDK_URL
                    dest NDK_DOWNLOAD
                    overwrite false
                    onlyIfModified true
                    quiet false
                }
            }

            copy {
                println "\nUnpack NDK..."
                eachFile { println it.file }
                from zipTree(NDK_DOWNLOAD)
                into project.rootDir.path
            }
        }
    }
}


/*
* https://wiki.openssl.org/index.php/Android
* Success for: OpenSSL 1.1.1-pre10-dev
* This task works only for Unix
* OpenSsl build work with NDK_PATH not standalone path!
* */
task buildOpenSsl() {
    if (isUnix()) {
        doLast {

            println ""
            println "------------------------- OpenSSL -------------------------"
            println "Min SDK version: $project.ext.SDK_MIN"
            println "Path to OpenSsl src: $OPENSSL_SRC"
            println "Path to OpenSsl output libs: $OPENSSL_LIBS_PATH"
            println "Path to Android NDK: $PATH_NDK"

            if (file(OPENSSL_SRC).exists()) {

                // Create folders
                mkdir OPENSSL_LIBS_PATH
                mkdir OPENSSL_LIBS_INSTALL

                // Build for all platforms
                getValues().each { abi, value ->

                    println "\nStart build for OpenSSL:"
                    println "ABI: " + value.ABI
                    println "ARCH: " + value.ARCH
                    println "TCHAIN NAME: " + value.TCN

                    // Pathways for libraries
                    def PATH = getPathEnv(PATH_TOOLCHAIN.replace("\$1", value.TCP + TOOLCHAIN_VERSION))
                    def INCLUDE_PATH = "$OPENSSL_LIBS_PATH/" + value.ABI + "/include"
                    def LIB_PATH = "$OPENSSL_LIBS_PATH/" + value.ABI + "/lib"

                    println "PATH: $PATH"
                    println "INCLUDE_PATH: $INCLUDE_PATH"
                    println "LIB_PATH: $LIB_PATH"

                    // TODO add more checks
                    if (!file(INCLUDE_PATH).exists() || !file(LIB_PATH).exists()) {

                        // Exec config for each arch
                        exec {
                            println "\nExec Configure..."
                            workingDir OPENSSL_SRC
                            environment "ANDROID_NDK", PATH_NDK
                            environment "PATH", PATH
                            commandLine "./Configure", "--prefix=$OPENSSL_LIBS_INSTALL", "--openssldir=$OPENSSL_LIBS_INSTALL", \
                                        "android-" + value.TCN, "-D__ANDROID_API__=$project.ext.SDK_MIN", \
                                        "no-shared", "no-ssl3", "no-comp", "no-hw", "no-engine"
                        }

                        // Clean build files
                        exec {
                            println "\nExec make clean..."
                            workingDir OPENSSL_SRC
                            commandLine "make", "clean"
                        }

                        // Build libraries
                        exec {
                            println "\nExec make..."
                            workingDir OPENSSL_SRC
                            environment "ANDROID_NDK", PATH_NDK
                            environment "PATH", PATH
                            commandLine "make", "-j4"
                        }

                        // Install libraries
                        exec {
                            println "\nExec make install_sw..."
                            workingDir OPENSSL_SRC
                            environment "PATH", PATH
                            commandLine "make", "install_sw"
                        }

                        // Copy include directory
                        copy {
                            println "\nCopy openssl include..."
                            eachFile { println it.file }
                            from OPENSSL_LIBS_INSTALL + "/include"
                            into INCLUDE_PATH
                        }

                        // Copy libraries
                        copy {
                            println "\nCopy openssl libraries..."
                            eachFile { println it.file }
                            from OPENSSL_LIBS_INSTALL + "/lib"
                            include MASK_LIB
                            into LIB_PATH
                        }
                    }
                }
            } else {
                println "OpenSsl source path doesn't exist..."
            }
        }
    }
}

/*
* https://curl.haxx.se/docs/install.html
* http://www.matteomattei.com/how-to-cross-compile-curl-library-with-ssl-and-zlib-support/
* https://habr.com/post/184960/
* This task works only for Unix
* */
task buildCurl() {
    if (isUnix()) {
        doLast {

            println ""
            println "------------------------- cURL -------------------------"
            println "Min SDK version: $project.ext.SDK_MIN"
            println "Path to Curl src: $CURL_SRC"
            println "Path to Curl output libs: $CURL_LIBS_PATH"
            println "Path to Android NDK: $PATH_NDK"

            if (file(CURL_SRC).exists()) {

                // Create folders
                mkdir CURL_LIBS_PATH
                mkdir CURL_LIBS_INSTALL

                // Build for all platforms
                getValues().each { abi, value ->

                    println "\nStart build for cURL:"
                    println "ABI: " + value.ABI
                    println "ARCH: " + value.ARCH
                    println "TCHAIN NAME: " + value.TCN

                    // Pathways for libraries
                    def INCLUDE_PATH = CURL_LIBS_PATH + "/" + value.ABI + "/include"
                    def LIB_PATH = CURL_LIBS_PATH + "/" + value.ABI + "/lib"

                    println "INCLUDE_PATH: $INCLUDE_PATH"
                    println "LIB_PATH: $LIB_PATH"

                    // TODO add more checks
                    if (!file(INCLUDE_PATH).exists() || !file(LIB_PATH).exists()) {

                        // Create standalone toolchain
                        def PATHWAYS = createStandalone(PATH_STANDALONE_SCRIPT, "$project.ext.PATH_STANDALONE_DEST", "$project.ext.SDK_MIN", value.ABI, true, false)

                        // Set environment
                        def OPENSSL_INCLUDE_PATH = "$OPENSSL_LIBS_PATH/" + value.ABI + "/include"
                        def OPENSSL_LIB_PATH = "$OPENSSL_LIBS_PATH/" + value.ABI + "/lib"

                        // TODO issue for aarch64, doesn't linked with OpenSsl
                        def OPENSSL_ENABLE = value.TCN == 'arm64'? "--without-ssl" : "--with-ssl"
                        PATHWAYS.CPPFLAGS += " -I$OPENSSL_INCLUDE_PATH"
                        PATHWAYS.LDFLAGS += " -L$OPENSSL_LIB_PATH"
                        PATHWAYS['LIBS'] = "-lssl -lcrypto"

                        // Create config every time for clean
                        exec {
                            println "\nExec buildconf..."
                            workingDir CURL_SRC
                            environment << PATHWAYS
                            commandLine "./buildconf"
                        }

                        // Exec config for each arch
                        exec {
                            println "\nExec configure..."
                            workingDir CURL_SRC
                            environment << PATHWAYS
                            commandLine "./configure", "--prefix=" + CURL_LIBS_INSTALL, "--host=" + value.ARCH, "--target=" + value.ARCH, \
                                OPENSSL_ENABLE, "--enable-static", "--disable-shared", "--enable-ipv6", "--enable-threaded-resolver", \
                                "--disable-dict", "--disable-gopher", "--disable-ldap", "--disable-ldaps", "--disable-manual", \
                                "--disable-telnet", "--disable-verbose"
                        }

                        // Clean libraries
                        exec {
                            println "\nExec make clean..."
                            workingDir CURL_SRC
                            environment << PATHWAYS
                            commandLine "make", "clean"
                        }

                        // Build libraries
                        exec {
                            println "\nExec make..."
                            workingDir CURL_SRC
                            environment << PATHWAYS
                            commandLine "make", "-j4"
                        }

                        // Install libraries
                        exec {
                            println "\nExec make install..."
                            workingDir CURL_SRC
                            environment << PATHWAYS
                            commandLine "make", "install"
                        }

                        // Copy include directory
                        copy {
                            println "\nCopy curl include..."
                            eachFile { println it.file }
                            from CURL_LIBS_INSTALL + "/include"
                            into INCLUDE_PATH
                        }

                        // Copy libraries
                        copy {
                            println "\nCopy curl libraries..."
                            eachFile { println it.file }
                            from CURL_LIBS_INSTALL + "/lib"
                            include MASK_LIB
                            into LIB_PATH
                        }
                    }
                }
            } else {
                println "Curl source path doesn't exist..."
            }
        }
    }
}

/*
* https://medium.com/@zw3rk/building-iconv-for-android-e3581a52668f
* This task works only for Unix
* */
task buildIconv() {
    if (isUnix()) {
        doLast {

            println ""
            println "------------------------- Iconv -------------------------"
            println "Min SDK version: $project.ext.SDK_MIN"
            println "Path to Iconv url: $ICONV_URL"
            println "Path to Iconv src: $ICONV_SRC"
            println "Path to Iconv output libs: $ICONV_LIBS_PATH"
            println "Path to Android NDK: $PATH_NDK"

            // Create folders
            mkdir ICONV_LIBS_PATH
            mkdir ICONV_LIBS_INSTALL
            mkdir ICONV_SRC

            // Download iconv last version
            if (!file(ICONV_SRC_GZ).exists()) {
                download {
                    println "\nDownload iconv..."
                    src ICONV_URL
                    dest ICONV_SRC
                    overwrite true
                    onlyIfModified true
                }
            }

            // Unpack src
            if (!file(ICONV_SRC_UNPACK).exists()) {
                copy {
                    println "\nUnpack iconv archive..."
                    eachFile { println it.file }
                    from tarTree(resources.gzip(ICONV_SRC_GZ))
                    into ICONV_SRC
                }
            }

            // Build for all platforms
            getValues().each { abi, value ->

                println "\nStart build for Iconv:"
                println "ABI: " + value.ABI
                println "ARCH: " + value.ARCH
                println "TCHAIN NAME: " + value.TCN

                // Pathways for libraries
                def INCLUDE_PATH = ICONV_LIBS_PATH + "/" + value.ABI + "/include"
                def LIB_PATH = ICONV_LIBS_PATH + "/" + value.ABI + "/lib"

                println "INCLUDE_PATH: $INCLUDE_PATH"
                println "LIB_PATH: $LIB_PATH"

                // TODO add more checks
                if (!file(INCLUDE_PATH).exists() || !file(LIB_PATH).exists()) {

                    // Create standalone toolchain
                    def PATHWAYS = createStandalone(PATH_STANDALONE_SCRIPT, "$project.ext.PATH_STANDALONE_DEST", "$project.ext.SDK_MIN", value.ABI, true, false)

                    // Exec config for each arch
                    exec {
                        println "\nExec configure..."
                        workingDir ICONV_SRC_UNPACK
                        environment << PATHWAYS
                        commandLine "./configure", "--prefix=" + ICONV_LIBS_INSTALL, "--host=" + value.ARCH, \
                                    "--with-sysroot=" + PATHWAYS.SYSROOT, "--enable-static", "--enable-shared=no"
                    }

                    // Clean builds
                    exec {
                        println "\nExec make clean..."
                        workingDir ICONV_SRC_UNPACK
                        environment << PATHWAYS
                        commandLine "make", "clean"
                    }

                    // Build libraries
                    exec {
                        println "\nExec make..."
                        workingDir ICONV_SRC_UNPACK
                        environment << PATHWAYS
                        commandLine "make", "-j4"
                    }

                    // Install libraries
                    exec {
                        println "\nExec make install..."
                        workingDir ICONV_SRC_UNPACK
                        environment << PATHWAYS
                        commandLine "make", "install"
                    }

                    // Copy include directory
                    copy {
                        println "\nCopy iconv include..."
                        eachFile { println it.file }
                        from ICONV_LIBS_INSTALL + "/include"
                        into INCLUDE_PATH
                    }

                    // Copy libraries
                    copy {
                        println "\nCopy iconv libraries..."
                        eachFile { println it.file }
                        from ICONV_LIBS_INSTALL + "/lib"
                        include MASK_LIB
                        into LIB_PATH
                    }
                }
            }
        }
    }
}


/*
* https://github.com/pelya/libiconv-libicu-android
* This task works only for Unix
* */
task buildIcu() {
    if (isUnix()) {
        doLast {

            println ""
            println "------------------------- ICU -------------------------"
            println "Min SDK version: $project.ext.SDK_MIN"
            println "Path to Icu src: $ICU_SRC"
            println "Path to Icu src root: $ICU_SRC_ROOT"
            println "Path to Icu output libs: $ICU_LIBS_PATH"
            println "Path to Icu output builds: $ICU_BUILD"
            println "Path to Android NDK: $PATH_NDK"

            if (!file(ICU_LIBS_PATH).exists()) {
                if (file(ICU_SRC).exists()) {

                    // Create folders
                    mkdir ICU_LIBS_PATH
                    mkdir ICU_LIBS_INSTALL
                    mkdir ICU_BUILD

                    //  First build for the system where the cross-build is run
                    def PRE_CPPFLAGS = "-O3 -fno-short-wchar -DU_USING_ICU_NAMESPACE=1 -fno-short-enums " +
                            "-DU_HAVE_NL_LANGINFO_CODESET=0 -D__STDC_INT64__ -DU_TIMEZONE=0 " +
                            "-DUCONFIG_NO_LEGACY_CONVERSION=1 -DUCONFIG_NO_BREAK_ITERATION=1 " +
                            "-DUCONFIG_NO_COLLATION=1 -DUCONFIG_NO_FORMATTING=1 -DUCONFIG_NO_TRANSLITERATION=0 " +
                            "-DUCONFIG_NO_REGULAR_EXPRESSIONS=1"
                    def CFLAGS = "-Os"
                    def CXXFLAGS="--std=c++11"

                    // Exec config for each arch
                    exec {
                        println "\nExec runConfigureICU..."
                        workingDir ICU_SRC_ROOT
                        environment "CFLAGS", CFLAGS
                        environment "CPPFLAGS", PRE_CPPFLAGS
                        environment "CXXFLAGS", CXXFLAGS
                        commandLine "./runConfigureICU", "Linux", "--prefix=$ICU_BUILD", \
                                "-enable-static", "--enable-shared=no", "--enable-extras=no", "--enable-tests=no", \
                                "--enable-strict=no", "--enable-icuio=no", "--enable-layout=no", "--enable-layoutex=no", \
                                "--enable-tools=no", "--enable-samples=no", "--enable-dyload=no"
                    }

                    exec {
                        println "\nExec make clean for runConfigureICU..."
                        workingDir ICU_SRC_ROOT
                        commandLine "make", "clean"
                    }

                    exec {
                        println "\nExec make for runConfigureICU..."
                        workingDir ICU_SRC_ROOT
                        environment "CFLAGS", CFLAGS
                        environment "CXXFLAGS", CXXFLAGS
                        commandLine "make", "-j4"
                    }


                    // Build for all platforms
                    getValues().each { abi, value ->

                        println "\nStart build for ICU:"
                        println "ABI: " + value.ABI
                        println "ARCH: " + value.ARCH
                        println "TCHAIN NAME: " + value.TCN

                        def INCLUDE_PATH = ICU_LIBS_PATH + "/" + value.ABI + "/include"
                        def LIB_PATH = ICU_LIBS_PATH + "/" + value.ABI + "/lib"

                        println "INCLUDE_PATH: $INCLUDE_PATH"
                        println "LIB_PATH: $LIB_PATH"

                        // TODO add more checks
                        if (!file(INCLUDE_PATH).exists() || !file(LIB_PATH).exists()) {

                            // Create standalone toolchain
                            def PATHWAYS = createStandalone(PATH_STANDALONE_SCRIPT, "$project.ext.PATH_STANDALONE_DEST", "$project.ext.SDK_MIN", value.ABI, true, false)

                            // Build config
                            exec {
                                println "\nExec configure..."
                                workingDir ICU_SRC_ROOT
                                environment << PATHWAYS
                                commandLine "./configure", "--host=" + value.ARCH, "--with-cross-build=$ICU_SRC_ROOT", "--prefix=$ICU_LIBS_INSTALL", \
                                    "-enable-static", "--enable-shared=no", "--enable-extras=no", "--enable-tests=no", \
                                    "--enable-strict=no", "--enable-icuio=no", "--enable-layout=no", "--enable-layoutex=no", \
                                    "--enable-tools=no", "--enable-samples=no", "--enable-dyload=no"
                            }

                            // Install libraries
                            exec {
                                println "\nExec make clean..."
                                workingDir ICU_SRC_ROOT
                                environment << PATHWAYS
                                commandLine "make", "clean"
                            }

                            // Build libraries
                            exec {
                                println "\nExec make..."
                                workingDir ICU_SRC_ROOT
                                environment << PATHWAYS
                                commandLine "make", "-j4"
                            }

                            // Install libraries
                            exec {
                                println "\nExec make install..."
                                workingDir ICU_SRC_ROOT
                                environment << PATHWAYS
                                commandLine "make", "install"
                            }

                            // Copy include directory
                            copy {
                                println "\nCopy iconv include..."
                                eachFile { println it.file }
                                from ICU_LIBS_INSTALL + "/include"
                                into INCLUDE_PATH
                            }

                            // Copy libraries
                            copy {
                                println "\nCopy iconv libraries..."
                                eachFile { println it.file }
                                from ICU_LIBS_INSTALL + "/lib"
                                include MASK_LIB
                                into LIB_PATH
                            }
                        }
                    }
                } else {
                    println "Icu source path doesn't exist..."
                }
            }
        }
    }
}

/*
* This task works only for Unix
* */
task buildBoost() {
    if (isUnix()) {
        doLast {

            println ""
            println "------------------------- Boost -------------------------"
            println "Min SDK version: $project.ext.SDK_MIN"
            println "Path to Boost output libs: $BOOST_LIBS_PATH"
            println "Path to Boost output src: $BOOST_SRC"
            println "Path to Android NDK: $PATH_NDK"

            if (file(BOOST_SRC).exists()) {

                // Create folders
                mkdir BOOST_LIBS_PATH
                mkdir BOOST_LIBS_INSTALL
                mkdir BOOST_SRC

                // Make config
                getValues().each { abi, value ->

                    println "\nStart build for Boost:"
                    println "ABI: " + value.ABI
                    println "ARCH: " + value.ARCH
                    println "TCHAIN NAME: " + value.TCN

                    def LIB_PATH = BOOST_LIBS_PATH + "/" + value.ABI
                    println "LIB_PATH: $LIB_PATH"

                    // TODO add more checks
                    if (!file(LIB_PATH).exists()) {

                        // Create standalone toolchain
                        def PATHWAYS = createStandalone(PATH_STANDALONE_SCRIPT, "$project.ext.PATH_STANDALONE_DEST", "$project.ext.SDK_MIN", value.ABI, true, false)

                        // Exec bootstrap
                        // Doesn't build with clang
                        exec {
                            println "\nExec bootstrap..."
                            workingDir BOOST_SRC
                            environment << PATHWAYS
                            commandLine "./bootstrap.sh", "--prefix=" + BOOST_LIBS_INSTALL, \
                                        "--with-icu=$ICU_LIBS_PATH/$value.ABI", \
                                        "--with-libraries=filesystem,system,date_time,regex"
                        }

                        // Copy config
                        copy {
                            println "\nCopy boost config..."
                            def configName = "user-config_${value.ABI}.jam"
                            eachFile { println it.file }
                            from "$BOOST_CONFIG/$configName"
                            into "$BOOST_SRC/tools/build/src"
                            rename configName, 'user-config.jam'
                        }

                        // Exec b2 clean
                        exec {
                            println "\nExec b2 clean..."
                            workingDir BOOST_SRC
                            environment << PATHWAYS
                            commandLine "./b2", "--clean", "-j4"
                        }

                        // Exec b2 build
                        exec {
                            println "\nExec b2 build..."
                            workingDir BOOST_SRC
                            environment << PATHWAYS
                            commandLine "./bjam", "toolset=clang",
                                        "target-os=linux", "threading=multi", "link=static", \
                                        "runtime-link=static", "variant=release", "threadapi=pthread", \
                                        "--stagedir=$LIB_PATH", "-j4"
                        }
                    }
                }
            } else {
                println "Boost source path doesn't exist..."
            }
        }
    }
}

/*
* Add here pre build tasks
* */
task preBuildTask() {
    doLast {
        downloadNdk.execute()
        buildOpenSsl.execute()
        buildCurl.execute()
        buildIconv.execute()
        buildIcu.execute()
        buildBoost.execute()
    }
}
